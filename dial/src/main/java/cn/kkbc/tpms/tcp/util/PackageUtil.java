package cn.kkbc.tpms.tcp.util;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.PooledByteBufAllocator;

import java.util.Arrays;

public class PackageUtil {
	
	/**
	 * 从src中获取data第一次出现的索引
	 * @param src
	 * @param data
	 * @param startIndex
	 * @return
	 */
	public int getIndex(byte[] src,byte[] data,int startIndex){
		if (src==null||data==null) {
			return -1;
		}
		
		for (int i=startIndex;i<src.length;i++) {
			boolean flag=true;
			for (int j = 0; j < data.length; j++) {
				if (i+j>=src.length||(i+j<src.length&&data[j]!=src[i+j])) {
					flag=false;
					break;
				}
			}
			if (flag) {
				return i;
			}
		}
		
		return -1;
	}
	
	/**
	 * 将rest中的数据按顺序添加到firse中
	 */
	public byte[] arrayAddToAnother(byte[] first, byte[][] rest) {
		int totalLength = first.length;
		byte[][] arrayOfByte = rest;

		int j = arrayOfByte.length;

		for (int i = 0; i < j; i++) {
			byte[] array = arrayOfByte[i];
			if (array != null) {
				totalLength += array.length;
			}
		}
		byte[] result = Arrays.copyOf(first, totalLength);
		int offset = first.length;
		// int first = rest.length;
		for (int i = 0; i < rest.length; i++) {
			byte[] array = rest[i];
			if (array != null) {
				System.arraycopy(array, 0, result, offset, array.length);
				offset += array.length;
			}
		}
		return result;
	}
	
	public static int getLastIndex(byte[] src , byte[] data){
		if (src.length==0||data.length==0) {
			return -1;
		}
		
		BitOperator operator=new BitOperator();
		
		String srcString=HexStringUtils.toHexString(src);
		String dataString=HexStringUtils.toHexString(data);
		int index=srcString.lastIndexOf(dataString);
		
		if (index!=-1) {

			index=index/2;
			if (src.length-index>=7) {//每条指令最小长度为7
				
				byte[] two=new byte[2];
				System.arraycopy(src, index+4, two, 0, 2);
				int dataLength=operator.twoBytesToInteger(two);
				
				if (src.length-index>=7+dataLength) {
					return index+7+dataLength;
				}
				
			}
		
		}
		
		return index;
		
	}
	
	protected ByteBuf getByteBuf(byte[] arr) {
		ByteBuf byteBuf = PooledByteBufAllocator.DEFAULT.directBuffer(arr.length);
		byteBuf.writeBytes(arr);
		return byteBuf;
	}
	  
	  public static void main(String[] args) throws Exception {
		  byte[] a=new byte[]{0x01,0x06,(byte) 0xA0,0x20,(byte) 0xA6,0x10,(byte) 0x85,(byte) 0xE5};
			byte[] c=new byte[]{-86, -86, 4, -128, -86, 4, 82};
			
			byte[][] d=new byte[][]{{-86, 4},{ 4}};
			
			byte[] e=new byte[]{2, 0, 85, 40,-86, -86, 32, 2, -56, -125, 24, 2, 65, 31, 0, 18, 23, 0, 7, -83, 0, 5, 92, 0, 2, -76, 0, 2, 41, 0, 1, 123, 0, 0, -23, 4, 0, 5, 0, -85, -86, -86, 4, -128, 2, 0, 85, 40, -86, -86, 4, -128, 2, 0, 87, 38, -86, -86, 4, -128, 2, 0, 91, 34, -86, -86, 4, -128, 2, 0, 92, 33, -86, -86, 4, -128, 2, 0, 90, 35, -86, -86, 4, -128, 2, 0, 86, 39, -86, -86, 4, -128, 2, 0, 86, 39, -86, -86, 4, -128, 2, 0, 87, 38, -86, -86, 4, -128, 2, 0, 87, 38, -86, -86, 4, -128, 2, 0, 85, 40, -86, -86, 4, -128, 2, 0, 83, 42, -86, -86, 4, -128, 2, 0, 82, 43, -86, -86, 4, -128, 2, 0, 82, 43, -86, -86, 4, -128, 2, 0, 82, 43, -86, -86, 4, -128, 2, 0, 84, 41, -86, -86, 4, -128, 2, 0, 84, 41, -86, -86, 4, -128, 2, 0, 81, 44, -86, -86, 4, -128, 2, 0, 76, 49, -86, -86, 4, -128, 2, 0, 80, 45,-86, -86, 4, -128, 2, 0, 82, 43, -86, -86, 4, -128, 2, 0, 83, 42, -86, -86, 4, -128, 2, 0, 83, 42, -86, -86, 4, -128, 2, 0, 82, 43, -86, -86, 4, -128, 2, 0, 77, 48, -86, -86, 4, -128, 2, 0, 75, 50, -86, -86, 4, -128, 2, 0, 76, 49, -86, -86, 4, -128, 2, 0, 77, 48, -86, -86, 4, -128, 2, 0, 76, 49, -86, -86, 4, -128, 2, 0, 73, 52, -86, -86, 4, -128, 2, 0, 74, 51, -86, -86, 4, -128, 2, 0, 75, 50, -86, -86, 4, -128, 2, 0, 74, 51, -86, -86, 4, -128, 2, 0, 70, 55, -86, -86, 4, -128, 2, 0, 66, 59, -86, -86, 4, -128, 2, 0, 65, 60, -86, -86, 4, -128, 2, 0, 67, 58, -86, -86, 4, -128, 2, 0, 70, 55, -86, -86, 4, -128, 2, 0, 70, 55, -86, -86, 4, -128, 2, 0, 69, 56, -86, -86, 4, -128, 2, 0, 68, 57, -86, -86, 4, -128, 2, 0, 67, 58, -86, -86, 4, -128, 2, 0, 67, 58, -86, -86, 4, -128, 2, 0, 69, 56, -86, -86, 4, -128, 2, 0, 69, 56, -86, -86, 4, -128, 2, 0, 69, 56, -86, -86, 4, -128, 2, 0, 69, 56, -86, -86, 4, -128, 2, 0, 69, 56, -86, -86, 4, -128, 2, 0, 69, 56, -86, -86, 4, -128, 2, 0, 69, 56, -86, -86, 4, -128, 2, 0, 71, 54, -86, -86, 4, -128, 2, 0, 71, 54, -86, -86, 4, -128, 2, 0, 69, 56, -86, -86, 4, -128, 2, 0, 68, 57, -86, -86, 4, -128, 2, 0, 67, 58, -86, -86, 4, -128, 2, 0, 67, 58, -86, -86, 4, -128, 2, 0, 67, 58, -86, -86, 4, -128, 2, 0, 67, 58, -86, -86, 4, -128, 2, 0, 66, 59, -86, -86, 4, -128, 2, 0, 64, 61, -86, -86, 4, -128, 2, 0, 61, 64, -86, -86, 4, -128, 2, 0, 64, 61, -86, -86, 4, -128, 2, 0, 66, 59, -86, -86, 4, -128, 2, 0, 66, 59, -86, -86, 4, -128, 2, 0, 65, 60, -86, -86, 4, -128, 2, 0, 65, 60, -86, -86, 4, -128, 2, 0, 64, 61, -86, -86, 4, -128, 2, 0, 61, 64, -86, -86, 4, -128, 2, 0, 61, 64, -86, -86, 4, -128, 2, 0, 64, 61, -86, -86, 4, -128, 2, 0, 65, 60, -86, -86, 4, -128, 2, 0, 65, 60, -86, -86, 4, -128, 2, 0, 65, 60, -86, -86, 4, -128, 2, 0, 64, 61, -86, -86, 4, -128, 2, 0, 64, 61, -86, -86, 4, -128, 2, 0, 61, 64, -86, -86, 4, -128, 2, 0, 64, 61, -86, -86, 4, -128, 2, 0, 61, 64, -86, -86, 4, -128, 2, 0, 60, 65, -86, -86, 4, -128, 2, 0, 60, 65, -86, -86, 4, -128, 2, 0, 59, 66, -86, -86, 4, -128, 2, 0, 59, 66, -86, -86, 4, -128, 2, 0, 58, 67, -86, -86, 4, -128, 2, 0, 58, 67, -86, -86, 4, -128, 2, 0, 58, 67, -86, -86, 4, -128, 2, 0, 58, 67, -86, -86, 4, -128, 2, 0, 58, 67, -86, -86, 4, -128, 2, 0, 57, 68, -86, -86, 4, -128, 2, 0, 57, 68, -86, -86, 4, -128, 2, 0, 58, 67, -86, -86, 4, -128, 2, 0, 58, 67, -86, -86, 4, -128, 2, 0, 58, 67, -86, -86, 4, -128, 2, 0, 58, 67, -86, -86, 4, -128, 2, 0, 58, 67, -86, -86, 4, -128, 2, 0, 58, 67, -86, -86, 4, -128, 2, 0, 57, 68, -86, -86, 4, -128, 2, 0, 57, 68, -86, -86, 4, -128, 2, 0, 57, 68, -86, -86, 4, -128, 2, 0, 58, 67, -86, -86, 4, -128, 2, 0, 57, 68, -86, -86, 4, -128, 2, 0, 57, 68, -86, -86, 4, -128, 2, 0, 56, 69, -86, -86, 4, -128, 2, 0, 56, 69, -86, -86, 4, -128, 2, 0, 56, 69, -86, -86, 4, -128, 2, 0, 56, 69, -86, -86, 4, -128, 2, 0, 56, 69, -86, -86, 4, -128, 2, 0, 56, 69, -86, -86, 4, -128, 2, 0, 55, 70, -86, -86, 4, -128, 2, 0, 56, 69, -86, -86, 4, -128, 2, 0, 56, 69, -86, -86, 4, -128, 2, 0, 56, 69, -86, -86, 4, -128, 2, 0, 56, 69, -86, -86, 4, -128, 2, 0, 55, 70, -86, -86, 4, -128, 2, 0, 55, 70, -86, -86, 4, -128, 2, 0, 55, 70, -86, -86, 4, -128, 2, 0, 56, 69, -86, -86, 4, -128, 2, 0, 55, 70, -86, -86, 4, -128, 2, 0, 54, 71, -86, -86, 4, -128, 2, 0, 54, 71, -86, -86, 4, -128, 2, 0, 54, 71, -86, -86, 4, -128, 2, 0, 54, 71, -86, -86, 4, -128, 2, 0, 55, 70, -86, -86, 4, -128, 2, 0, 55, 70, -86, -86, 4, -128, 2, 0, 54, 71, -86, -86, 4, -128, 2, 0, 54, 71, -86, -86, 4, -128, 2, 0, 53, 72, -86, -86, 4, -128, 2, 0, 53, 72, -86, -86, 4, -128, 2, 0, 53, 72, -86, -86, 4, -128, 2, 0, 54, 71, -86, -86, 4, -128, 2, 0, 54, 71, -86, -86, 4, -128, 2, 0, 53, 72, -86, -86, 4, -128, 2, 0, 53, 72, -86, -86, 4, -128, 2, 0, 53, 72, -86, -86, 4, -128, 2, 0, 53, 72, -86, -86, 4, -128, 2, 0, 53, 72, -86, -86, 4, -128, 2, 0, 53, 72, -86, -86, 4, -128, 2, 0, 53, 72, -86, -86, 4, -128, 2, 0, 53, 72, -86, -86, 4, -128, 2, 0, 53, 72, -86, -86, 4, -128, 2, 0, 54, 71, -86, -86, 4, -128, 2, 0, 53, 72, -86, -86, 4, -128, 2, 0, 53, 72, -86, -86, 4, -128, 2, 0, 53, 72, -86, -86, 4, -128, 2, 0, 53, 72, -86, -86, 4, -128, 2, 0, 53, 72, -86, -86, 4, -128, 2, 0, 52, 73, -86, -86, 4, -128, 2, 0, 53, 72, -86, -86, 4, -128, 2, 0, 52, 73, -86, -86, 4, -128, 2, 0, 53, 72, -86, -86, 4, -128, 2, 0, 52, 73, -86, -86, 4, -128, 2, 0, 52, 73, -86, -86, 4, -128, 2, 0, 53, 72, -86, -86, 4, -128, 2, 0, 52, 73, -86, -86, 4, -128, 2, 0, 52, 73, -86, -86, 4, -128, 2, 0, 52, 73, -86, -86, 4, -128, 2, 0, 52, 73, -86, -86, 4, -128, 2, 0, 52, 73, -86, -86, 4, -128, 2, 0, 51, 74, -86, -86, 4, -128, 2, 0, 52, 73, -86, -86, 4, -128, 2, 0, 52, 73, -86, -86, 4, -128, 2, 0, 51, 74, -86, -86, 4, -128, 2, 0, 51, 74, -86, -86, 4, -128, 2, 0, 52, 73, -86, -86, 4, -128, 2, 0, 51, 74, -86, -86, 4, -128, 2, 0, 51, 74, -86, -86, 4, -128, 2, 0, 51, 74, -86, -86, 4, -128, 2, 0, 51, 74, -86, -86, 4, -128, 2, 0, 51, 74, -86, -86, 4, -128, 2, 0, 51, 74, -86, -86, 4, -128, 2, 0, 51, 74, -86, -86, 4, -128, 2, 0, 51, 74, -86, -86, 4, -128, 2, 0, 50, 75, -86, -86, 4, -128, 2, 0, 50, 75, -86, -86, 4, -128, 2, 0, 51, 74, -86, -86, 4, -128, 2, 0, 50, 75, -86, -86, 4, -128, 2, 0, 50, 75, -86, -86, 4, -128, 2, 0, 50, 75, -86, -86, 4, -128, 2, 0, 51, 74, -86, -86, 4, -128};
			
			
			byte[] j=new byte[]{2, 0, 85, 40,-86, -86, 4, -128, 2, 0, 85, 40, -86, -86, 4, -128, 2, 0, 87, 38, -86, -86, 4, -128, 2, 0, 91, 34,-86, -86, 32, 2, -56, -125, 24, 2, 65, 31, 0, 18, 23, 0, 7, -83, 0, 5, 92, 0, 2, -76, 0, 2, 41, 0, 1, 123, 0, 0, -23, 4, 0, 5, 0, -85,  -86, -86, 4, -128, 2, 0, 92, 33, -86, -86, 4, -128, 2, 0, 90, 35, -86, -86, 4, -128, 2, 0, 86, 39, -86, -86, 4, -128, 2, 0, 86, 39, -86, -86, 4, -128, 2, 0, 87, 38};
			 byte[] h=new byte[]{0x02,0x01,0x00};
			 String index1;
			 String index2;
//			 double index1Temp=new Double(index1).doubleValue();
//			 double index2Temp=new Double(index2).doubleValue();
			 
//			 if(index1Temp>index2Temp){
//				 return 1;
//			 }else if(index1Temp<index2Temp){
//				 return -1;
//			 }else {
//				return 0;
//			}
			
	}

}
