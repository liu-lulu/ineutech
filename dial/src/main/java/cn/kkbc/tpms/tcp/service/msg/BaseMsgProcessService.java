package cn.kkbc.tpms.tcp.service.msg;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.PooledByteBufAllocator;
import io.netty.buffer.Unpooled;
import io.netty.channel.Channel;
import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelFutureListener;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import cn.kkbc.tpms.tcp.TPMSConsts;
import cn.kkbc.tpms.tcp.server.SessionManager;
import cn.kkbc.tpms.tcp.util.BitOperator;
import cn.kkbc.tpms.tcp.util.HexStringUtils;
import cn.kkbc.tpms.tcp.vo.PackageData;

/**
 * 下行数据
 * @author liululu
 *
 */
public class BaseMsgProcessService {

	protected final Logger log = LoggerFactory.getLogger(getClass());
	protected final Logger weblog = LoggerFactory.getLogger("weblog");

	protected SessionManager sessionManager;
	protected BitOperator bitOperator;

	public BaseMsgProcessService() {
		this.sessionManager = SessionManager.getInstance();
		this.bitOperator=new BitOperator();
	}

	protected ByteBuf getByteBuf(byte[] arr) {
		ByteBuf byteBuf = PooledByteBufAllocator.DEFAULT.directBuffer(arr.length);
		byteBuf.writeBytes(arr);
		return byteBuf;
	}

	public int send2Client(Channel channel, byte[] arr) throws InterruptedException {
		log.info("服务器发送给拨盘数据:{}",HexStringUtils.toHexString(arr));
//		System.out.println("isWritable:"+channel.isWritable()+";isActive:"+channel.isActive()+";isOpen:"+channel.isOpen()+";isRegistered:"+channel.isRegistered());
//		ChannelFuture future = channel.writeAndFlush(Unpooled.copiedBuffer(arr)).sync();
		ChannelFuture future = channel.writeAndFlush(getByteBuf(arr)).sync();
		if (!future.isSuccess()) {
			log.error("发送数据出错:{}", future.cause());
			return 0;
		}
//		System.out.println("----发送成功------");
		return 1;
	}
	
	/**
	 * 使投票器进入关机状态（样机暂时未开放）
	 * @return
	 */
	public byte[] shutDown_data(){
		return new byte[]{(byte) 0xF5,0x5F,0x01,0x01,0x00,0x00,0x02};
	}
	
	/**
	 * 连接服务器成功
	 * @return
	 */
	public byte[] connectSuccess_data(){
		return new byte[]{(byte) 0xF5,0x5F,0x01,0x02,0x00,0x00,0x03};
	}
	
	/**
	 * 电量查询
	 * @return
	 */
	public byte[] eleQuery_data(){
		return new byte[]{(byte) 0xF5,0x5F,0x01,0x03,0x00,0x00,0x04};
	}
	
	/**
	 * 获取mac
	 * @return
	 */
	public byte[] getMac_data(){
		return new byte[]{(byte) 0xF5,0x5F,0x01,0x09,0x00,0x00,0x0A};
	}
	
	/**
	 * 查询投票器当前时间
	 * @return
	 */
	public byte[] curTime_data(){
		return new byte[]{(byte) 0xF5,0x5F,0x01,0x04,0x00,0x00,0x05};
	}
	
	/**
	 * 切换模式 :退出打分模式，重新进入选择界面 
	 * @return
	 */
	public byte[] changMode(){
		return new byte[]{(byte) 0xF5,0x5F,0x01,0x18,0x00,0x00,0x19};
	}
	
	/**
	 * 选择评分模式，在选择界面下才有效 
	 * @param mode  0x01 为打勾叉模式  0x02 为键盘输入模式 0x03 为旋钮输入模式 
	 * @return
	 */
	public byte[] selectMode(int mode){
		byte modeByte=bitOperator.integerTo1Byte(mode);
		return new byte[]{(byte) 0xF5,0x5F,0x01,0x15,0x00,0x01,modeByte,(byte) (modeByte+0x17)};
	}
	
	/**
	 * 删除 Flash 数据 
	 * @return
	 */
	public byte[] delFlashData(){
		return new byte[]{(byte) 0xF5,0x5F,0x01,0x19,0x00,0x00,0x1A};
	}
	
	/**
	 * 设备重启 
	 * @return
	 */
	public byte[] restartData(){
		return new byte[]{(byte) 0xF5,0x5F,0x01,0x20,0x00,0x00,0x21};
	}
	
	/**
	 * 设置 ID 
	 * @return
	 */
	public byte[] setIDData(int ID){
		
		PackageData packageData=new PackageData(TPMSConsts.HEAD, TPMSConsts.DATA_TYPE_DOWN, TPMSConsts.COMMAND_SETID, bitOperator.integerTo2Bytes(ID));
		packageData.setCheckSum(getCheckSum(packageData));
		
		return getByteFromPackageData(packageData);
	}
	
	/**
	 * 为投票器设置时间
	 * @return
	 * @throws ParseException 
	 */
	public byte[] setTime_data(String time) throws ParseException{
		SimpleDateFormat format=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Date date=format.parse(time);
		
		return setTime_data(date);
	}
	
	/**
	 * 为投票器设置时间
	 * @return
	 * @throws ParseException 
	 */
	public byte[] setTime_data(Date date) throws ParseException{
		
		Calendar cal = Calendar.getInstance();
		cal.setTime(date);
//		cal.setFirstDayOfWeek(Calendar.MONDAY);
		
		int hour=cal.get(Calendar.HOUR_OF_DAY);
		int minute=cal.get(Calendar.MINUTE);
		int second=cal.get(Calendar.SECOND);
		
		int weekday=cal.get(Calendar.DAY_OF_WEEK)-1;
		
		int year=cal.get(Calendar.YEAR);
		int month=cal.get(Calendar.MONTH)+1;
		int day=cal.get(Calendar.DATE);
		
		int mod=0x00;
		
		byte[] timeByte={(byte) hour,(byte) minute,(byte) second,(byte) mod,(byte) weekday,(byte) month,(byte) day,(byte) (year%100)};
		
		PackageData packageData=new PackageData(TPMSConsts.HEAD, TPMSConsts.DATA_TYPE_DOWN, TPMSConsts.COMMAND_SET_TIME, timeByte);
		packageData.setCheckSum(getCheckSum(packageData));
		
		return getByteFromPackageData(packageData);
	}
	
	/**
	 * 推送人名
	 * @param zimo 取模数据
	 * @return
	 */
	public byte[] sendName_data(byte[] zimo){
		PackageData packageData=new PackageData(TPMSConsts.HEAD, TPMSConsts.DATA_TYPE_DOWN, TPMSConsts.COMMAND_SEND_NAME, zimo);
		packageData.setCheckSum(getCheckSum(packageData));
		
		return getByteFromPackageData(packageData);
	}

	/**
	 * 采集暂停
	 * @return
	 */
	public byte[] pause_data(){
		return new byte[]{(byte) 0xF5,0x5F,0x01,0x11,0x00,0x01,0x00,0x13};
	}
	
	/**
	 * 取消暂停
	 * @return
	 */
	public byte[] cancelPause_data(){
		return new byte[]{(byte) 0xF5,0x5F,0x01,0x11,0x00,0x01,0x01,0x14};
	}
	
	
	/**
	 * 结束测试过程
	 * @return
	 */
	public byte[] testComplet_data(){
		return new byte[]{(byte) 0xF5,0x5F,0x01,0x12,0x00,0x00,0x13};
	}
	
	
	/**
	 * 通知投票器进入测试
	 * @return
	 */
	public byte[] enterTest_data(){
		return new byte[]{(byte) 0xF5,0x5F,0x01,0x16,0x00,0x00,0x17};
	}
	
	/**
	 * 获取,发送服务器操作dtu命令
	 * @param element
	 * @param info 操作信息
	 * @param no 包号
	 * @return
	 */
	public byte[] getSendGetOperationDtuData(int command){
		try {
			PackageData data=new PackageData();
			data.setHead(TPMSConsts.HEAD);
			data.setDataType(TPMSConsts.DATA_TYPE_DOWN);
			data.setCommand(command);
			
			data.setData(new byte[0]);
			
			data.setDataLen(data.getData().length);
			
			data.setCheckSum(getCheckSum(data));
			
			return getByteFromPackageData(data);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
		
	}
	
	public int getCheckSum(PackageData data){
		byte retArray[]=this.bitOperator.concatAll(bitOperator.integerTo1Bytes(data.getDataType()),
				bitOperator.integerTo1Bytes(data.getCommand()),
				bitOperator.integerTo2Bytes(data.getDataLen()),data.getData());
//		System.out.println(HexStringUtils.toHexString(retArray));
		int ret=0;
		for (byte temp:retArray) {
			ret+=temp;
		}
		return this.bitOperator.integerTo1Byte(ret);
	}
	
	public byte[] getByteFromPackageData(PackageData data) {
		return this.bitOperator.concatAll(bitOperator.integerTo2Bytes(data.getHead()), 
				bitOperator.integerTo1Bytes(data.getDataType()),
				bitOperator.integerTo1Bytes(data.getCommand()),
				bitOperator.integerTo2Bytes(data.getDataLen()),data.getData(),
				bitOperator.integerTo1Bytes(data.getCheckSum()));
		
	}
	
	public static void main(String[] args) throws ParseException {
		BaseMsgProcessService baseMsgProcessService=new BaseMsgProcessService();
//		System.out.println(HexStringUtils.toHexString(baseMsgProcessService.getSendGetOperationDtuData(0x16)));
//		System.out.println(HexStringUtils.toHexString(baseMsgProcessService.setTime_data("2017-02-09 13:36:50")));
		
//		byte zimo[]={0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x3E,0x00,0x00,0x01,0x23,0x22,0x26,0x2C,0x3C,0x3E,0x20,0x28,0x2C,0x24,0x22,0x02,0x00,0x00,0x3E,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x3E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x13,0x12,0x1E,0x1E,0x01,0x3F,0x01,0x05,0x09,0x19,0x31,0x01,0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,0x0C,0x0C,0x0F,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,0x0C,0x0C,0x0F,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,(byte) 0x80,(byte) 0x9C,(byte) 0xF8,(byte) 0xF8,(byte) 0x88,(byte) 0x8C,(byte) 0xFC,(byte) 0x94,(byte) 0x94,(byte) 0x94,(byte) 0x94,(byte) 0x94,(byte) 0x84,0x00,0x00,(byte) 0xFC,(byte) 0x88,(byte) 0x88,(byte) 0x88,(byte) 0x88,(byte) 0x88,(byte) 0x88,(byte) 0x88,(byte) 0xFC,0x00,0x00,(byte) 0x80,(byte) 0x9C,(byte) 0xF8,(byte) 0xF8,(byte) 0x88,(byte) 0x8C,(byte) 0xFC,(byte) 0x94,(byte) 0x94,(byte) 0x94,(byte) 0x94,(byte) 0x94,(byte) 0x84,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,(byte) 0xC4,0x44,0x7C,0x60,0x00,(byte) 0xFC,0x0C,(byte) 0x88,(byte) 0xE0,0x38,0x0C,0x00,0x04,0x04,(byte) 0x84,(byte) 0x84,(byte) 0x84,(byte) 0x84,(byte) 0x84,(byte) 0x84,(byte) 0x84,(byte) 0x84,(byte) 0x84,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x6C,(byte) 0xEC,(byte) 0xC0,(byte) 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x6C,(byte) 0xEC,(byte) 0xC0,(byte) 0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
//		
//		System.out.println(HexStringUtils.toHexString(baseMsgProcessService.sendName_data(zimo)));
		
//		byte a[]={0x01,0x06,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x3E,0x00,0x00,0x01,0x23,0x22,0x26,0x2C,0x3C,0x3E,0x20,0x28,0x2C,0x24,0x22,0x02,0x00,0x00,0x3E,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x3E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x13,0x12,0x1E,0x1E,0x01,0x3F,0x01,0x05,0x09,0x19,0x31,0x01,0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,0x0C,0x0C,0x0F,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,0x0C,0x0C,0x0F,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,(byte)0x80,(byte)0x9C,(byte)0xF8,(byte)0xF8,(byte)0x88,(byte)0x8C,(byte)0xFC,(byte)0x94,(byte)0x94,(byte)0x94,(byte)0x94,(byte)0x94,(byte)0x84,0x00,0x00,(byte)0xFC,(byte)0x88,(byte)0x88,(byte)0x88,(byte)0x88,(byte)0x88,(byte)0x88,(byte)0x88,(byte)0xFC,0x00,0x00,(byte)0x80,(byte)0x9C,(byte)0xF8,(byte)0xF8,(byte)0x88,(byte)0x8C,(byte)0xFC,(byte)0x94,(byte)0x94,(byte)0x94,(byte)0x94,(byte)0x94,(byte)0x84,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,(byte)0xC4,0x44,0x7C,0x60,0x00,(byte)0xFC,0x0C,(byte)0x88,(byte)0xE0,0x38,0x0C,0x00,0x04,0x04,(byte)0x84,(byte)0x84,(byte)0x84,(byte)0x84,(byte)0x84,(byte)0x84,(byte)0x84,(byte)0x84,(byte)0x84,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x6C,(byte)0xEC,(byte)0xC0,(byte)0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x6C,(byte)0xEC,(byte)0xC0,(byte)0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
//	 byte data[]={0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x3E,0x00,0x00,0x01,0x23,0x22,0x26,0x2C,0x3C,0x3E,0x20,0x28,0x2C,0x24,0x22,0x02,0x00,0x00,0x3E,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x3E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x13,0x12,0x1E,0x1E,0x01,0x3F,0x01,0x05,0x09,0x19,0x31,0x01,0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,0x0C,0x0C,0x0F,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,0x0C,0x0C,0x0F,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,(byte)0x80,(byte)0x9C,(byte)0xF8,(byte)0xF8,(byte)0x88,(byte)0x8C,(byte)0xFC,(byte)0x94,(byte)0x94,(byte)0x94,(byte)0x94,(byte)0x94,(byte)0x84,0x00,0x00,(byte)0xFC,(byte)0x88,(byte)0x88,(byte)0x88,(byte)0x88,(byte)0x88,(byte)0x88,(byte)0x88,(byte)0xFC,0x00,0x00,(byte)0x80,(byte)0x9C,(byte)0xF8,(byte)0xF8,(byte)0x88,(byte)0x8C,(byte)0xFC,(byte)0x94,(byte)0x94,(byte)0x94,(byte)0x94,(byte)0x94,(byte)0x84,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,(byte)0xC4,0x44,0x7C,0x60,0x00,(byte)0xFC,0x0C,(byte)0x88,(byte)0xE0,0x38,0x0C,0x00,0x04,0x04,(byte)0x84,(byte)0x84,(byte)0x84,(byte)0x84,(byte)0x84,(byte)0x84,(byte)0x84,(byte)0x84,(byte)0x84,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x6C,(byte)0xEC,(byte)0xC0,(byte)0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x6C,(byte)0xEC,(byte)0xC0,(byte)0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
//		baseMsgProcessService.sendName_data(data);
//		int check=0;
//		for (int i = 0; i < a.length; i++) {
//			check+=a[i];
//		}
		BitOperator operator=new BitOperator();
//		System.out.println(HexStringUtils.toHexString(a));
//		System.out.println(check+"*********"+operator.integerTo1Byte(check));
		
		System.out.println(HexStringUtils.toHexString(operator.integerTo2Bytes(0)));
		
		System.out.println(HexStringUtils.toHexString(baseMsgProcessService.setIDData(0)));
	
	}

}
