package cn.ineutech.tpms.tcp.processor;

import io.netty.util.CharsetUtil;

import java.io.IOException;
import java.net.UnknownHostException;
import java.text.ParseException;
import java.util.Date;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import cn.ineutech.tpms.tcp.TPMSConsts;
import cn.ineutech.tpms.tcp.server.SessionManager;
import cn.ineutech.tpms.tcp.service.msg.BaseMsgProcessService;
import cn.ineutech.tpms.tcp.service.queue.MemoryMsgQueueServiceImpl;
import cn.ineutech.tpms.tcp.service.queue.MsgQueueService;
import cn.ineutech.tpms.tcp.vo.QueueElement;
import cn.ineutech.tpms.tcp.vo.Session;

import com.ineutech.entity.Hard;
import com.ineutech.entity.TestInfo;
import com.ineutech.entity.TestScoreVO;
import com.ineutech.entity.TestUser;
import com.ineutech.service.DeviceService;
import com.ineutech.service.impl.DeviceServiceImpl;
import com.ineutech.util.SpringContextUtils;
import com.ineutech.vo.TestUserSessionVO;

/**
 * 
 * @name: MsgQueueProcessor 
 * @description: 处理接收到的拨盘的数据
 * @date 2018年2月1日 上午11:39:30
 * @author liululu
 */
public class MsgQueueProcessor extends Thread implements Processor {

	private Logger log = LoggerFactory.getLogger(getClass());

	private volatile boolean isRunning = false;
	private MsgQueueService msgQueueService = null;
	private SessionManager sessionManager;
	private DeviceService service;
	private BaseMsgProcessService sendToDevice;

	public MsgQueueProcessor() {
		this.msgQueueService = new MemoryMsgQueueServiceImpl();
		this.sessionManager = SessionManager.getInstance();
		this.service = (DeviceServiceImpl) SpringContextUtils.getContext()
				.getBean("deviceService");
		this.sendToDevice = new BaseMsgProcessService();
		this.setName("TCP-MsgQueueProcessor");
		this.setDaemon(true);
	}

	@Override
	public synchronized void startProcess() {
		if (this.isRunning) {
			throw new IllegalStateException(this.getName()
					+ " is already started .");
		}
		this.isRunning = true;
		super.start();
		this.log.info("队列消息处理器启动完毕...");
	}

	@Override
	public synchronized void stopProcess() {
		if (!this.isRunning) {
			throw new IllegalStateException(this.getName()
					+ " is not yet started .");
		}
		this.isRunning = false;
		this.interrupt();
		this.log.info("队列消息处理器已经停止...");
	}

	@Override
	public void run() {
		
		ThreadPoolExecutor executor=new ThreadPoolExecutor(20, 30, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());
		while (this.isRunning) {
			QueueElement msg = null;
			try {
				msg = this.msgQueueService.poll();
			} catch (InterruptedException e1) {
				continue;
			}
			try {
				if (msg != null) {
					executor.execute(doTask(msg));
				}
			} catch (Exception e) {
				log.error("消息处理出现异常:{}", e.getMessage());
				e.printStackTrace();
			}
		}

		executor.shutdown();
	}

	/**
	 * 进行消息处理
	 * @param queueElement
	 * @return
	 */
	private Runnable doTask(QueueElement queueElement) {
		return new Runnable() {
			@Override
			public void run() {
				try {
					processMsg(queueElement);
				} catch (InterruptedException e) {
					e.printStackTrace();
				} catch (ParseException e) {
					e.printStackTrace();
				}
			}
		};
	}

	/**
	 * 解析接收到的消息
	 * @param queueElement
	 * @throws InterruptedException
	 * @throws ParseException
	 */
	public void processMsg(QueueElement queueElement)
			throws InterruptedException, ParseException {
		Session session = sessionManager.findPadBySessionId(queueElement
				.getChannel().id().asLongText());
		log.info("process data:{}", queueElement.getContent());

		String[] content = queueElement.getContent().split(TPMSConsts.SPLIT);

		if (content != null && content.length == 6
				&& TPMSConsts.HEAD.equals(content[0])) {

			String clientType = content[1];
			String uuid = content[2];
			String dataType = content[3];
			String data = content[4];
			String time = content[5];

			session.setClientType(clientType);
			session.setUuid(uuid);

			// 首次获取设备信息(拨盘设备保存)
			if (TPMSConsts.CLIENT_SCORE.equals(clientType) || TPMSConsts.CLIENT_MONITOR.equals(clientType)) {
				if (session.getDeviceId() == null) {
					Hard hard = service.getByMac(uuid);
					if (hard == null) {
						hard = new Hard();
						hard.setHardType(Hard.TYPE_DIAL);
						hard.setLastTime(new Date());
						hard.setMac(uuid);
						int hardId = service.saveHardInfo(hard);
						session.setDeviceId(hardId);
					} else {
						session.setDeviceId(hard.getHardId());
					}

					if (sessionManager.findByUUID(uuid) == null) {
						sessionManager.getPadIdMap().put(session.getUuid(),
								queueElement.getChannel().id().asLongText());
					}
				}
				
				if (TPMSConsts.UP_COMMAND_HEART.equals(dataType)) {
					log.info("心跳包");
					sendToDevice.send2Client(session.getChannel(),
							sendToDevice.heartAnswer());
					return;
				}
			}

			// 测试端
			if (TPMSConsts.CLIENT_SCORE.equals(clientType)) {

				if (TPMSConsts.UP_COMMAND_BIND.equals(dataType)) {

					// 座位号登陆
					int seatNo = Integer.valueOf(data);
					log.info("人员登陆信息-座位号：" + seatNo);
					TestInfo testInfo = sessionManager.getTestInfo();
					
					// 已选择测试节目
					if (testInfo != null) {
						
						// 该座位号已登陆
						if (sessionManager.getBySeatNo(seatNo) != null) {
							sendToDevice.send2Client(session.getChannel(),
									sendToDevice.loginResult(
											TPMSConsts.LOGIN_FAIL,
											TPMSConsts.LOGIN_FAIL_2));
							return;
						}

						TestUser testUser = service.getUser(new TestUser(
								testInfo.getTestId(), seatNo));
						
						// 没有分配该座位号，登陆失败
						if (testUser == null) {
							sendToDevice.send2Client(session.getChannel(),
									sendToDevice.loginResult(
											TPMSConsts.LOGIN_FAIL,
											TPMSConsts.LOGIN_FAIL_3));
							return;
						}

						// 设备切换账号(之前登陆过)
						if (session.getTestUser() != null) {
							
							// 将之前登陆的绑定信息清除
							sessionManager.clearLoginUserInfo(session
									.getTestUser().getHumanId());
						}

						//重新获取测试项目的测试时间和测试时长
//						updTestInfo();
						
						TestUserSessionVO newUserVO = new TestUserSessionVO(
								testUser, seatNo, session.getDeviceId());
						// 返回用户信息
						sendToDevice.send2Client(session.getChannel(),
								sendToDevice.getOnlineInfo(newUserVO));

						session.setSeatNo(seatNo);
						session.setTestUser(testUser);
						
						// 如果不是人员信息阶段,说明是掉线重新登陆,不用手动确认个人信息
//						if (!TPMSConsts.PERIOD_INFO.equals(testInfo.getPeriod())) {
//							sessionManager.updLoginUserInfo(testUser,
//									session.getSeatNo(), session.getDeviceId());
//							// 重新登陆成功发送给监控端
//							sendToDevice.sendToMonitor(sendToDevice.loginResult(
//									TPMSConsts.LOGIN_SUCC, session.getSeatNo() + ""));
//
//							testUser.setDeviceStatus(TestUser.DEVICE_STATUS_ONLINE);
//							service.updateDeviceStatus(testUser);
//						}

					} else {
						// 还未选择测试项目，登陆失败
						sendToDevice.send2Client(session.getChannel(),
								sendToDevice.loginResult(TPMSConsts.LOGIN_FAIL,
										TPMSConsts.LOGIN_FAIL_1));
						return;
					}

				}else if (TPMSConsts.UP_COMMAND_RELOGIN.equals(dataType)) {
					//掉线重连,直接登陆不需要确认
					int seatNo = Integer.valueOf(data);
					log.info("掉线重连：" + seatNo);
					TestInfo testInfo = sessionManager.getTestInfo();
					TestUser testUser = service.getUser(new TestUser(
							testInfo.getTestId(), seatNo));
					sessionManager.updLoginUserInfo(testUser,
							seatNo, session.getDeviceId());
					// 重新登陆成功发送给监控端
					sendToDevice.sendToMonitor(sendToDevice.loginResult(
							TPMSConsts.LOGIN_SUCC, session.getSeatNo() + ""));

					testUser.setDeviceStatus(TestUser.DEVICE_STATUS_ONLINE);
					service.updateDeviceStatus(testUser);
					
					session.setSeatNo(seatNo);
					session.setTestUser(testUser);
					
					TestUserSessionVO newUserVO = new TestUserSessionVO(
							testUser, seatNo, session.getDeviceId());
					sessionManager.updLoginUserInfo(testUser,
							seatNo, session.getDeviceId());
					// 返回用户信息
					sendToDevice.send2Client(session.getChannel(),
							sendToDevice.getOnlineInfo(newUserVO));
					
				} else if (TPMSConsts.UP_COMMAND_SCORE.equals(dataType)) {
					// 上送数据
					log.info("分数:{}", data);

					// 实时将分数发送给监控端
					if (session.getScore()==null||session.getScore().intValue()!=Integer.valueOf(data)) {
						sendToDevice.sendToMonitor(sendToDevice.sendScoreToMonitor(
								data, session.getSeatNo()));
					}

					TestScoreVO vo = new TestScoreVO();
					vo.setCreateTime(new Date());
					vo.setTestId(session.getTestUser() == null ? 0 : session
							.getTestUser().getTestId());
					vo.setMac(session.getUuid());
					vo.setScore(Integer.valueOf(data));
					vo.setHumanId(session.getTestUser() == null ? 0 : session
							.getTestUser().getHumanId());
					vo.setHardId(session.getDeviceId());
					vo.setSeatNo(session.getTestUser() == null
							|| session.getTestUser().getSeatNo() == null ? 0
							: session.getTestUser().getSeatNo());
					vo.setUserGroup(session.getTestUser() == null ? ""
							: session.getTestUser().getUserGroup());
					vo.setCaijiTime(time);

					service.saveData(sessionManager.getTestInfo(), session, vo);
					session.setLastChuliDate(vo.getCreateTime());
					session.setScore(Integer.valueOf(data));

					sessionManager.setScore(session.getSeatNo(),
							Integer.valueOf(data));

				} else if (TPMSConsts.UP_COMMAND_BEFORE.equals(dataType)
						|| TPMSConsts.UP_COMMAND_AFTER.equals(dataType)) {
					// 问卷进度
					System.out.println("进度:" + data);
					TestUserSessionVO user = sessionManager.getBySeatNo(session
							.getSeatNo());
					// 进度发给监控端
					sendToDevice.sendToMonitor(sendToDevice
							.sendProcessToMonitor(data, session.getSeatNo()));
					if (TPMSConsts.UP_COMMAND_BEFORE.equals(dataType)) {
						// 测前进度
						user.setBeforePaperProcess(data);
					} else {
						// 测后进度
						user.setAfterPaperProcess(data);
					}
				} else if (TPMSConsts.UP_COMMAND_INFO_CONFIRM.equals(dataType)) {
					// 登陆信息确认
					int seatNo = session.getSeatNo();
					log.info("登陆信息确认,座位号:" + seatNo);

					// 该座位号已登陆确认
					if (sessionManager.getBySeatNo(seatNo) != null) {
						sendToDevice.send2Client(session.getChannel(),
								sendToDevice.loginResult(
										TPMSConsts.LOGIN_FAIL,
										TPMSConsts.LOGIN_FAIL_2));
						return;
					}
					
					TestUser testUser = session.getTestUser();
					sessionManager.updLoginUserInfo(testUser,
							seatNo, session.getDeviceId());
					
					sendToDevice.send2Client(session.getChannel(),
							sendToDevice.userConfirm(seatNo + ""));

					// 登陆成功发送给监控端
					sendToDevice.sendToMonitor(sendToDevice.loginResult(
							TPMSConsts.LOGIN_SUCC, seatNo + ""));

					testUser.setDeviceStatus(TestUser.DEVICE_STATUS_ONLINE);
					service.updateDeviceStatus(testUser);

				} else if (TPMSConsts.UP_COMMAND_BEFORE_END.equals(dataType)) {
					// 测前问卷完成
					sendToDevice.sendToMonitor(sendToDevice.sendDataToMonitor(
							TPMSConsts.DOWN_COMMAND_BEFORE_END,
							session.getSeatNo() + "",""));
					log.info("测前问卷完成,座位号:" + session.getSeatNo());
					session.getTestUser().setDeviceStatus(TestUser.DEVICE_STATUS_BEFORE_END);
					service.updateDeviceStatus(session.getTestUser());
					
					TestUserSessionVO user = sessionManager.getBySeatNo(session
							.getSeatNo());
					user.setBeforeFinish(TPMSConsts.FINISH);

				} else if (TPMSConsts.UP_COMMAND_DIAL_END.equals(dataType)) {
					// 拨盘调试完成
					sendToDevice.sendToMonitor(sendToDevice.sendDataToMonitor(
							TPMSConsts.DOWN_COMMAND_DIAL_END,
							session.getSeatNo() + "",""));
					log.info("拨盘调试完成,座位号:" + session.getSeatNo());
					session.getTestUser().setDeviceStatus(TestUser.DEVICE_STATUS_DIAL_END);
					service.updateDeviceStatus(session.getTestUser());

				} else if (TPMSConsts.UP_COMMAND_AFTER_END.equals(dataType)) {
					// 测后问卷完成
					sendToDevice.sendToMonitor(sendToDevice.sendDataToMonitor(
							TPMSConsts.DOWN_COMMAND_AFTER_END,
							session.getSeatNo() + "",""));
					log.info("测后问卷完成,座位号:" + session.getSeatNo());
					
					session.getTestUser().setDeviceStatus(TestUser.DEVICE_STATUS_AFTER_END);
					service.updateDeviceStatus(session.getTestUser());
					
					TestUserSessionVO user = sessionManager.getBySeatNo(session
							.getSeatNo());
					user.setAfterFinish(TPMSConsts.FINISH);
				} else if (TPMSConsts.UP_COMMAND_PACKAGE_END.equals(dataType)) {
					// 数据打包上传完成
					sendToDevice.sendToMonitor(sendToDevice.sendDataToMonitor(
							TPMSConsts.DOWN_COMMAND_PACKAGE_END,
							session.getSeatNo() + "",""));
					log.info("数据打包上传完成,座位号:" + session.getSeatNo());
					session.getTestUser().setDeviceStatus(TestUser.DEVICE_STATUS_PACKAGE_END);
					service.updateDeviceStatus(session.getTestUser());
				} else {
					log.info("数据类型未知:"+queueElement.getContent());
				}
			} else if (TPMSConsts.CLIENT_FACE.equals(clientType)) {
				// 表情端
				if (TPMSConsts.UP_COMMAND_FACE_STATUS.equals(dataType)) {
					// 表情在线状态
					String[] info=data.split(":");
					String deviceId=info[0];
					String status=info[1];
					sendToDevice.sendToMonitor(sendToDevice.sendDataToMonitor(
							TPMSConsts.DOWN_COMMAND_FACE_STATUS,
							deviceId,status));
					log.info("{}设备表情在线状态:{}", deviceId, status);
					sessionManager.putFaceStatus(deviceId, status);
				}

			} else if (TPMSConsts.CLIENT_MONITOR.equals(clientType)) {
				// 监控端
				if (TPMSConsts.UP_COMMAND_PERIOD_STATE.equals(dataType)) {
					String state=TPMSConsts.STATUS_PAUSE.equals(data)?TPMSConsts.VIDEO_PAUSE:TPMSConsts.VIDEO_BACK;
					log.info("阶段状态:"+state);
					for (Session play : sessionManager.playToList()) {
						sendToDevice.send2Client(play.getChannel(), state.getBytes(CharsetUtil.UTF_8));
					}
				} else if (TPMSConsts.UP_COMMAND_SEATNO_CHANGE.equals(dataType)) {
					String[] changeUser = data.split(";");
					for (String newNoInfo : changeUser) {
						String[] newNo = newNoInfo.split("=");
						if (StringUtils.isNotEmpty(newNo[0])) {
							sessionManager.noChange(Integer.valueOf(newNo[0]), newNo[1]);
						}
					}
					
					sendToDevice.sendToMonitor(sendToDevice.sendDataToMonitor(
							TPMSConsts.DOWN_COMMAND_SEATNO_CHANGE_SUCCESS,
							data,""));
				} else if (TPMSConsts.UP_COMMAND_BRAIN_BIND.equals(dataType)) {
						String[] bindNo = data.split(";");
						String humanId=bindNo[0];
						String humanNo=bindNo[1];
						String brainNo=bindNo[2];
						String result=TPMSConsts.BRAIN_BIND_SUCC;
						String comment=humanId+";"+humanNo+";";
						if (StringUtils.isEmpty(brainNo)) {
							//解除绑定
							int ret = service.removeBind(Integer.valueOf(humanId));
							if (ret==1) {
								comment=comment+"";
							}
						} else {
							//绑定脑电
							Hard hard = service.getUserBrain(Integer.valueOf(humanId));
							if (hard == null || StringUtils.isEmpty(hard.getMac())) {
								int ret = service.userBindBrain(Integer.valueOf(humanId), Integer.valueOf(brainNo));
								if (ret==1) {
									comment=comment+hard.getHardId();
								} else {
									result=TPMSConsts.BRAIN_BIND_FAIL;
									if (ret==2) {
										// 该编号没有对应的脑电 
										comment=TPMSConsts.BRAIN_BIND_FAIL_2;
									} else if (ret==3) {
										// 该脑电已绑定到其他人员,不能重复绑定
										comment=TPMSConsts.BRAIN_BIND_FAIL_3;
									}
								}
							} else {
								//已绑定脑电,不能重复绑定
								result=TPMSConsts.BRAIN_BIND_FAIL;
								comment=TPMSConsts.BRAIN_BIND_FAIL_1;
							}
						}
					
					if (TPMSConsts.BRAIN_BIND_SUCC.equals(result)) {
						sendToDevice.sendToMonitor(sendToDevice.sendDataToMonitor(
								TPMSConsts.DOWN_COMMAND_BRAIN_BIND_RESULT,
								result,comment));
					} else {
						sendToDevice.send2Client(session.getChannel(), sendToDevice.sendDataToMonitor(
								TPMSConsts.DOWN_COMMAND_BRAIN_BIND_RESULT,
								result,comment));
					}
					
				}
			}

		} else {
			log.info("{}:数据不完整", queueElement.getContent());
		}

	}
	
	/**
	 * 更新测试项目的实际测试时间和时长
	 */
//	public void updTestInfo(){
//		TestInfo testInfo = service.getTestInfoById(sessionManager.getTestInfo().getTestId());
//		sessionManager.getTestInfo().setActualTime(testInfo.getActualTime());
//		sessionManager.getTestInfo().setProLength(testInfo.getProLength());
//	}

	public static void main(String[] args) throws UnknownHostException,
			IOException, InterruptedException {

		// Socket socket = new Socket("localhost", 8082);
		// OutputStream outputStream = socket.getOutputStream();
		// while (true) {
		// outputStream.write("smg,1,uuid,1,85,2017-08-11 13:29:30\r\n".getBytes());
		// outputStream.flush();
		// Thread.sleep(1000);
		// }

	}

}
