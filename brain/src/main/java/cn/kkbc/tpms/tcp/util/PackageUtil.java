package cn.kkbc.tpms.tcp.util;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.kkbc.util.ToolsForByte;

import cn.kkbc.tpms.tcp.constant.PackageDataConstant;

public class PackageUtil {
	
	/**
	 * 从data中提炼出大包数据和小包数据
	 * @param data
	 * @return map中: key-->"1":小包  "2":大包
	 */
	public Map<String,List<byte[]>> getPackageData(byte[] data){
		Map<String,List<byte[]>> ret=new HashMap<String, List<byte[]>>();
		byte[] ori=null;
		
		int oriIndex;
		int startIndex=0;
		
		while ((oriIndex=getIndex(data, PackageDataConstant.ORI_DATA_HEAD_ARRAY,startIndex))!=-1&&data.length-oriIndex>8) {
			ori=new byte[8];
			System.arraycopy(data, oriIndex, ori, 0, 8);
			if (ret.get("1")==null) {
				List<byte[]> list=new ArrayList<byte[]>();
				list.add(ori);
				ret.put("1", list);
			}else {
				ret.get("1").add(ori);
			}
			
			startIndex+=8;
		}
		
		int proIndex=getIndex(data, PackageDataConstant.PRO_DATA_HEAD_ARRAY,0);
		if (proIndex!=-1&&proIndex+36<data.length) {
			byte[] pro=new byte[36];
			System.arraycopy(data, proIndex, pro, 0, 36);
			if (ret.get("2")==null) {
				List<byte[]> list=new ArrayList<byte[]>();
				list.add(pro);
				ret.put("2", list);
			}
		}
		
		return ret;
	}
	
	/**
	 * 从src中获取data第一次出现的索引
	 * @param src
	 * @param data
	 * @param startIndex
	 * @return
	 */
	public int getIndex(byte[] src,byte[] data,int startIndex){
		if (src==null||data==null) {
			return -1;
		}
		
		for (int i=startIndex;i<src.length;i++) {
			boolean flag=true;
			for (int j = 0; j < data.length; j++) {
				if (i+j<src.length&&data[j]!=src[i+j]) {
					flag=false;
					break;
				}
			}
			if (flag) {
				return i;
			}
		}
		
		return -1;
	}
	
	/**
	 * 从data中分离出一组数据，并获取剩余数据
	 * @param data
	 * @return map中: key-->"1":组数据  "2":剩余数据
	 */
	public Map<String, byte[]> getRowDataAndShengyu(byte[] data){
		Map<String, byte[]> ret=new HashMap<String, byte[]>();
		
		int oriIndex=0;
		int oriCount=0;
		while (oriCount<=511) {//获取第512个小包的索引
			int tempIndex=getIndex(data, PackageDataConstant.ORI_DATA_HEAD_ARRAY,oriIndex);
			if (tempIndex!=-1) {
				oriCount++;
				oriIndex=tempIndex+8;
			}else {
				oriIndex++;
			}
		}
		
		int proIndex=getIndex(data, PackageDataConstant.PRO_DATA_HEAD_ARRAY, 0);//获取大包的索引
		
		byte[] rowData=null;//获取一组数据(包括512个小包和1个大包)
		if (oriIndex>proIndex) {
			
			rowData=new byte[oriIndex];
			System.arraycopy(data, 0, rowData, 0, oriIndex);
			
		}else if (oriIndex<=proIndex) {
			rowData=new byte[proIndex+36];
			System.arraycopy(data, 0, rowData, 0, proIndex+36);
		}
		byte[] shengyuData=new byte[data.length-rowData.length];//剩余数据
		System.arraycopy(data, rowData.length, shengyuData, 0, data.length-rowData.length);
		
		ret.put("1", rowData);
		ret.put("2", shengyuData);
		return ret;
	}
	
	
	/**
	 * 将rest中的数据按顺序添加到firse中
	 */
	public byte[] arrayAddToAnother(byte[] first, byte[][] rest) {
		int totalLength = first.length;
		byte[][] arrayOfByte = rest;

		int j = arrayOfByte.length;

		for (int i = 0; i < j; i++) {
			byte[] array = arrayOfByte[i];
			if (array != null) {
				totalLength += array.length;
			}
		}
		byte[] result = Arrays.copyOf(first, totalLength);
		int offset = first.length;
		// int first = rest.length;
		for (int i = 0; i < rest.length; i++) {
			byte[] array = rest[i];
			if (array != null) {
				System.arraycopy(array, 0, result, offset, array.length);
				offset += array.length;
			}
		}
		return result;
	}
	  
	  public static void main(String[] args) throws Exception {
		  byte[] a=new byte[]{0x01,0x06,(byte) 0xA0,0x20,(byte) 0xA6,0x10,(byte) 0x85,(byte) 0xE5};
			byte[] c=new byte[]{-86, -86, 4, -128, -86, 4, 82};
			
			byte[][] d=new byte[][]{{-86, 4},{ 4}};
			
			byte[] e=new byte[]{2, 0, 85, 40,-86, -86, 32, 2, -56, -125, 24, 2, 65, 31, 0, 18, 23, 0, 7, -83, 0, 5, 92, 0, 2, -76, 0, 2, 41, 0, 1, 123, 0, 0, -23, 4, 0, 5, 0, -85, -86, -86, 4, -128, 2, 0, 85, 40, -86, -86, 4, -128, 2, 0, 87, 38, -86, -86, 4, -128, 2, 0, 91, 34, -86, -86, 4, -128, 2, 0, 92, 33, -86, -86, 4, -128, 2, 0, 90, 35, -86, -86, 4, -128, 2, 0, 86, 39, -86, -86, 4, -128, 2, 0, 86, 39, -86, -86, 4, -128, 2, 0, 87, 38, -86, -86, 4, -128, 2, 0, 87, 38, -86, -86, 4, -128, 2, 0, 85, 40, -86, -86, 4, -128, 2, 0, 83, 42, -86, -86, 4, -128, 2, 0, 82, 43, -86, -86, 4, -128, 2, 0, 82, 43, -86, -86, 4, -128, 2, 0, 82, 43, -86, -86, 4, -128, 2, 0, 84, 41, -86, -86, 4, -128, 2, 0, 84, 41, -86, -86, 4, -128, 2, 0, 81, 44, -86, -86, 4, -128, 2, 0, 76, 49, -86, -86, 4, -128, 2, 0, 80, 45,-86, -86, 4, -128, 2, 0, 82, 43, -86, -86, 4, -128, 2, 0, 83, 42, -86, -86, 4, -128, 2, 0, 83, 42, -86, -86, 4, -128, 2, 0, 82, 43, -86, -86, 4, -128, 2, 0, 77, 48, -86, -86, 4, -128, 2, 0, 75, 50, -86, -86, 4, -128, 2, 0, 76, 49, -86, -86, 4, -128, 2, 0, 77, 48, -86, -86, 4, -128, 2, 0, 76, 49, -86, -86, 4, -128, 2, 0, 73, 52, -86, -86, 4, -128, 2, 0, 74, 51, -86, -86, 4, -128, 2, 0, 75, 50, -86, -86, 4, -128, 2, 0, 74, 51, -86, -86, 4, -128, 2, 0, 70, 55, -86, -86, 4, -128, 2, 0, 66, 59, -86, -86, 4, -128, 2, 0, 65, 60, -86, -86, 4, -128, 2, 0, 67, 58, -86, -86, 4, -128, 2, 0, 70, 55, -86, -86, 4, -128, 2, 0, 70, 55, -86, -86, 4, -128, 2, 0, 69, 56, -86, -86, 4, -128, 2, 0, 68, 57, -86, -86, 4, -128, 2, 0, 67, 58, -86, -86, 4, -128, 2, 0, 67, 58, -86, -86, 4, -128, 2, 0, 69, 56, -86, -86, 4, -128, 2, 0, 69, 56, -86, -86, 4, -128, 2, 0, 69, 56, -86, -86, 4, -128, 2, 0, 69, 56, -86, -86, 4, -128, 2, 0, 69, 56, -86, -86, 4, -128, 2, 0, 69, 56, -86, -86, 4, -128, 2, 0, 69, 56, -86, -86, 4, -128, 2, 0, 71, 54, -86, -86, 4, -128, 2, 0, 71, 54, -86, -86, 4, -128, 2, 0, 69, 56, -86, -86, 4, -128, 2, 0, 68, 57, -86, -86, 4, -128, 2, 0, 67, 58, -86, -86, 4, -128, 2, 0, 67, 58, -86, -86, 4, -128, 2, 0, 67, 58, -86, -86, 4, -128, 2, 0, 67, 58, -86, -86, 4, -128, 2, 0, 66, 59, -86, -86, 4, -128, 2, 0, 64, 61, -86, -86, 4, -128, 2, 0, 61, 64, -86, -86, 4, -128, 2, 0, 64, 61, -86, -86, 4, -128, 2, 0, 66, 59, -86, -86, 4, -128, 2, 0, 66, 59, -86, -86, 4, -128, 2, 0, 65, 60, -86, -86, 4, -128, 2, 0, 65, 60, -86, -86, 4, -128, 2, 0, 64, 61, -86, -86, 4, -128, 2, 0, 61, 64, -86, -86, 4, -128, 2, 0, 61, 64, -86, -86, 4, -128, 2, 0, 64, 61, -86, -86, 4, -128, 2, 0, 65, 60, -86, -86, 4, -128, 2, 0, 65, 60, -86, -86, 4, -128, 2, 0, 65, 60, -86, -86, 4, -128, 2, 0, 64, 61, -86, -86, 4, -128, 2, 0, 64, 61, -86, -86, 4, -128, 2, 0, 61, 64, -86, -86, 4, -128, 2, 0, 64, 61, -86, -86, 4, -128, 2, 0, 61, 64, -86, -86, 4, -128, 2, 0, 60, 65, -86, -86, 4, -128, 2, 0, 60, 65, -86, -86, 4, -128, 2, 0, 59, 66, -86, -86, 4, -128, 2, 0, 59, 66, -86, -86, 4, -128, 2, 0, 58, 67, -86, -86, 4, -128, 2, 0, 58, 67, -86, -86, 4, -128, 2, 0, 58, 67, -86, -86, 4, -128, 2, 0, 58, 67, -86, -86, 4, -128, 2, 0, 58, 67, -86, -86, 4, -128, 2, 0, 57, 68, -86, -86, 4, -128, 2, 0, 57, 68, -86, -86, 4, -128, 2, 0, 58, 67, -86, -86, 4, -128, 2, 0, 58, 67, -86, -86, 4, -128, 2, 0, 58, 67, -86, -86, 4, -128, 2, 0, 58, 67, -86, -86, 4, -128, 2, 0, 58, 67, -86, -86, 4, -128, 2, 0, 58, 67, -86, -86, 4, -128, 2, 0, 57, 68, -86, -86, 4, -128, 2, 0, 57, 68, -86, -86, 4, -128, 2, 0, 57, 68, -86, -86, 4, -128, 2, 0, 58, 67, -86, -86, 4, -128, 2, 0, 57, 68, -86, -86, 4, -128, 2, 0, 57, 68, -86, -86, 4, -128, 2, 0, 56, 69, -86, -86, 4, -128, 2, 0, 56, 69, -86, -86, 4, -128, 2, 0, 56, 69, -86, -86, 4, -128, 2, 0, 56, 69, -86, -86, 4, -128, 2, 0, 56, 69, -86, -86, 4, -128, 2, 0, 56, 69, -86, -86, 4, -128, 2, 0, 55, 70, -86, -86, 4, -128, 2, 0, 56, 69, -86, -86, 4, -128, 2, 0, 56, 69, -86, -86, 4, -128, 2, 0, 56, 69, -86, -86, 4, -128, 2, 0, 56, 69, -86, -86, 4, -128, 2, 0, 55, 70, -86, -86, 4, -128, 2, 0, 55, 70, -86, -86, 4, -128, 2, 0, 55, 70, -86, -86, 4, -128, 2, 0, 56, 69, -86, -86, 4, -128, 2, 0, 55, 70, -86, -86, 4, -128, 2, 0, 54, 71, -86, -86, 4, -128, 2, 0, 54, 71, -86, -86, 4, -128, 2, 0, 54, 71, -86, -86, 4, -128, 2, 0, 54, 71, -86, -86, 4, -128, 2, 0, 55, 70, -86, -86, 4, -128, 2, 0, 55, 70, -86, -86, 4, -128, 2, 0, 54, 71, -86, -86, 4, -128, 2, 0, 54, 71, -86, -86, 4, -128, 2, 0, 53, 72, -86, -86, 4, -128, 2, 0, 53, 72, -86, -86, 4, -128, 2, 0, 53, 72, -86, -86, 4, -128, 2, 0, 54, 71, -86, -86, 4, -128, 2, 0, 54, 71, -86, -86, 4, -128, 2, 0, 53, 72, -86, -86, 4, -128, 2, 0, 53, 72, -86, -86, 4, -128, 2, 0, 53, 72, -86, -86, 4, -128, 2, 0, 53, 72, -86, -86, 4, -128, 2, 0, 53, 72, -86, -86, 4, -128, 2, 0, 53, 72, -86, -86, 4, -128, 2, 0, 53, 72, -86, -86, 4, -128, 2, 0, 53, 72, -86, -86, 4, -128, 2, 0, 53, 72, -86, -86, 4, -128, 2, 0, 54, 71, -86, -86, 4, -128, 2, 0, 53, 72, -86, -86, 4, -128, 2, 0, 53, 72, -86, -86, 4, -128, 2, 0, 53, 72, -86, -86, 4, -128, 2, 0, 53, 72, -86, -86, 4, -128, 2, 0, 53, 72, -86, -86, 4, -128, 2, 0, 52, 73, -86, -86, 4, -128, 2, 0, 53, 72, -86, -86, 4, -128, 2, 0, 52, 73, -86, -86, 4, -128, 2, 0, 53, 72, -86, -86, 4, -128, 2, 0, 52, 73, -86, -86, 4, -128, 2, 0, 52, 73, -86, -86, 4, -128, 2, 0, 53, 72, -86, -86, 4, -128, 2, 0, 52, 73, -86, -86, 4, -128, 2, 0, 52, 73, -86, -86, 4, -128, 2, 0, 52, 73, -86, -86, 4, -128, 2, 0, 52, 73, -86, -86, 4, -128, 2, 0, 52, 73, -86, -86, 4, -128, 2, 0, 51, 74, -86, -86, 4, -128, 2, 0, 52, 73, -86, -86, 4, -128, 2, 0, 52, 73, -86, -86, 4, -128, 2, 0, 51, 74, -86, -86, 4, -128, 2, 0, 51, 74, -86, -86, 4, -128, 2, 0, 52, 73, -86, -86, 4, -128, 2, 0, 51, 74, -86, -86, 4, -128, 2, 0, 51, 74, -86, -86, 4, -128, 2, 0, 51, 74, -86, -86, 4, -128, 2, 0, 51, 74, -86, -86, 4, -128, 2, 0, 51, 74, -86, -86, 4, -128, 2, 0, 51, 74, -86, -86, 4, -128, 2, 0, 51, 74, -86, -86, 4, -128, 2, 0, 51, 74, -86, -86, 4, -128, 2, 0, 50, 75, -86, -86, 4, -128, 2, 0, 50, 75, -86, -86, 4, -128, 2, 0, 51, 74, -86, -86, 4, -128, 2, 0, 50, 75, -86, -86, 4, -128, 2, 0, 50, 75, -86, -86, 4, -128, 2, 0, 50, 75, -86, -86, 4, -128, 2, 0, 51, 74, -86, -86, 4, -128};
			
			
			byte[] j=new byte[]{2, 0, 85, 40,-86, -86, 4, -128, 2, 0, 85, 40, -86, -86, 4, -128, 2, 0, 87, 38, -86, -86, 4, -128, 2, 0, 91, 34,-86, -86, 32, 2, -56, -125, 24, 2, 65, 31, 0, 18, 23, 0, 7, -83, 0, 5, 92, 0, 2, -76, 0, 2, 41, 0, 1, 123, 0, 0, -23, 4, 0, 5, 0, -85,  -86, -86, 4, -128, 2, 0, 92, 33, -86, -86, 4, -128, 2, 0, 90, 35, -86, -86, 4, -128, 2, 0, 86, 39, -86, -86, 4, -128, 2, 0, 86, 39, -86, -86, 4, -128, 2, 0, 87, 38};
			 byte[] h=new byte[]{0x02,0x01,0x00};
			
	}
	  
	  public int checkSum(byte[] data){
		ToolsForByte tool=new ToolsForByte();
		if (data==null) {
			return 0;
		}
		int ret=0;
		for (byte bt:data) {
			ret+=tool.oneByteToInteger(bt);
		}
		
		System.out.println(0xff);
		return ret;
	  }

}
